[gd_scene load_steps=7 format=3 uid="uid://c83wswsjxnmva"]

[ext_resource type="Script" uid="uid://c2yjf6cukiw10" path="res://Scenes/TrainingProgram/parts/GameplayLoop/parts/Structure3DContainer/Rendering/parts/Generator/generator.gd" id="1_3guo4"]
[ext_resource type="Texture2D" uid="uid://wisbmwbvme8e" path="res://Media/images/Defaults/generator.png" id="2_a50ow"]

[sub_resource type="Shader" id="Shader_a50ow"]
code = "shader_type canvas_item;

// Horizontal (Y-based scanline) controls
uniform bool enable_horizontal = true;
uniform float amplitude_h : hint_range(0.0, 50.0) = 20.0;
uniform float frequency_h : hint_range(0.0, 10.0) = 5.0;
uniform float speed_h : hint_range(0.0, 10.0) = 1.0;
uniform float opacity_h : hint_range(0.0, 1.0) = 1.0;
uniform int step_count_h : hint_range(1, 128) = 8;

// Vertical (X-based columnline) controls
uniform bool enable_vertical = true;
uniform float amplitude_v : hint_range(0.0, 50.0) = 20.0;
uniform float frequency_v : hint_range(0.0, 10.0) = 5.0;
uniform float speed_v : hint_range(0.0, 10.0) = 1.0;
uniform float opacity_v : hint_range(0.0, 1.0) = 1.0;
uniform int step_count_v : hint_range(1, 128) = 8;

void fragment() {
    float offset_x = 0.0;
    float offset_y = 0.0;

    // Horizontal distortion (Y-axis based)
    if (enable_horizontal) {
        float y_px = floor(FRAGCOORD.y);
        float wave_h = sin(y_px * frequency_h * 0.01 + TIME * speed_h);
        float stepped_wave_h = floor(wave_h * float(step_count_h)) / float(step_count_h);
        offset_x = stepped_wave_h * (amplitude_h * SCREEN_PIXEL_SIZE.x);
    }

    // Vertical distortion (X-axis based)
    if (enable_vertical) {
        float x_px = floor(FRAGCOORD.x);
        float wave_v = sin(x_px * frequency_v * 0.01 + TIME * speed_v);
        float stepped_wave_v = floor(wave_v * float(step_count_v)) / float(step_count_v);
        offset_y = stepped_wave_v * (amplitude_v * SCREEN_PIXEL_SIZE.y);
    }

    vec2 distorted_uv = UV + vec2(offset_x, offset_y);

    vec4 tex_color = texture(TEXTURE, distorted_uv);

    // Apply opacity blending
    float final_opacity = 1.0;
    if (enable_horizontal && enable_vertical) {
        final_opacity = mix(opacity_h, opacity_v, 0.5);
    } else if (enable_horizontal) {
        final_opacity = opacity_h;
    } else if (enable_vertical) {
        final_opacity = opacity_v;
    }

    tex_color.a *= final_opacity;

    COLOR = tex_color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jt1ti"]
shader = SubResource("Shader_a50ow")
shader_parameter/enable_horizontal = true
shader_parameter/amplitude_h = 8.306
shader_parameter/frequency_h = 1.21
shader_parameter/speed_h = 1.0
shader_parameter/opacity_h = 1.0
shader_parameter/step_count_h = 4
shader_parameter/enable_vertical = true
shader_parameter/amplitude_v = 2.661
shader_parameter/frequency_v = 0.887
shader_parameter/speed_v = 1.323
shader_parameter/opacity_v = 1.0
shader_parameter/step_count_v = 4

[sub_resource type="Environment" id="Environment_kdkyo"]
ambient_light_source = 3
ambient_light_color = Color(1, 1, 1, 1)
volumetric_fog_density = 0.0167
volumetric_fog_gi_inject = 0.89
volumetric_fog_length = 22.9
volumetric_fog_detail_spread = 0.5
volumetric_fog_ambient_inject = 0.84

[sub_resource type="BoxMesh" id="BoxMesh_a50ow"]

[node name="Generator" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_3guo4")

[node name="ColorRect" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0.419608, 0.160784, 0.160784, 1)

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource("ShaderMaterial_jt1ti")
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("2_a50ow")
expand_mode = 1
stretch_mode = 6

[node name="SubViewport" type="SubViewport" parent="."]
own_world_3d = true
transparent_bg = true
size = Vector2i(1920, 1080)

[node name="Node3D" type="Node3D" parent="SubViewport"]

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="SubViewport/Node3D"]
transform = Transform3D(0.101042, 0.971312, -0.215275, -0.323194, 0.236693, 0.916255, 0.940923, -0.0230045, 0.337838, 0, 0, 0)

[node name="WorldEnvironment" type="WorldEnvironment" parent="SubViewport/Node3D"]
environment = SubResource("Environment_kdkyo")

[node name="MeshInstance3D" type="MeshInstance3D" parent="SubViewport/Node3D"]
transform = Transform3D(0.707107, 0, 0.707107, 0, 1, 0, -0.707107, 0, 0.707107, 0, -1.95392, -2)
mesh = SubResource("BoxMesh_a50ow")

[node name="Camera3D" type="Camera3D" parent="SubViewport/Node3D"]
transform = Transform3D(1.25, 0, 0, 0, 1.02394, 0.716971, 0, -0.716973, 1.02394, 0, 0, 0)
cull_mask = 1023
projection = 1
size = 8.0
