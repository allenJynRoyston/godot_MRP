[gd_scene load_steps=6 format=3 uid="uid://bl0fcbjjnqeux"]

[ext_resource type="Script" uid="uid://oc8w27gluocd" path="res://Scenes/TrainingProgram/parts/GameplayLoop/parts/Structure3DContainer/Rendering/parts/Wing/wing.gd" id="1_qq608"]
[ext_resource type="PackedScene" uid="uid://b0xcdsr0gn57k" path="res://Scenes/TrainingProgram/parts/GameplayLoop/parts/Structure3DContainer/Rendering/parts/Wing/part/WingRender/WingRender.tscn" id="2_n8dix"]

[sub_resource type="Shader" id="Shader_n8dix"]
code = "shader_type canvas_item;

uniform float outline_thickness : hint_range(0.0, 10.0) = 1.0;
uniform vec4 outline_color = vec4(0.0, 0.0, 0.0, 1.0); // Outline color (default black)
uniform vec4 base_color = vec4(1.0, 1.0, 1.0, 1.0);     // Tint color (default white / no tint)

void fragment() {
    // Fetch the current texture color
    vec4 tex_color = texture(TEXTURE, UV);

    // Tint the texture color with the base color
    vec4 output_color = tex_color * base_color;

    // Proceed only if the pixel is opaque
    if (tex_color.a > 0.1) {
        // Use TEXTURE_PIXEL_SIZE for UV space calculations
        vec2 texel_size = TEXTURE_PIXEL_SIZE * outline_thickness;

        // Check surrounding pixels for transparency (to detect edges)
        bool is_edge = false;
        is_edge = is_edge || (texture(TEXTURE, UV + vec2(-texel_size.x, 0.0)).a < 0.1);
        is_edge = is_edge || (texture(TEXTURE, UV + vec2(texel_size.x, 0.0)).a < 0.1);
        is_edge = is_edge || (texture(TEXTURE, UV + vec2(0.0, -texel_size.y)).a < 0.1);
        is_edge = is_edge || (texture(TEXTURE, UV + vec2(0.0, texel_size.y)).a < 0.1);

        // If it's an edge pixel, use the outline color instead
        if (is_edge) {
            output_color = outline_color;
        }
    } else {
        // Fully transparent background
        output_color = vec4(0.0, 0.0, 0.0, 0.0);
    }

    // Final output
    COLOR = output_color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qq608"]
shader = SubResource("Shader_n8dix")
shader_parameter/outline_thickness = 10.0
shader_parameter/outline_color = Vector4(0.5, 0.5, 0, 1)
shader_parameter/base_color = Vector4(1, 1, 1, 1)

[sub_resource type="ViewportTexture" id="ViewportTexture_u0dki"]
viewport_path = NodePath("SubViewport")

[node name="Wing" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_qq608")

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource("ShaderMaterial_qq608")
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0
texture = SubResource("ViewportTexture_u0dki")
stretch_mode = 5

[node name="SubViewport" type="SubViewport" parent="."]
transparent_bg = true
handle_input_locally = false
size = Vector2i(1920, 1080)

[node name="WingRender" parent="SubViewport" instance=ExtResource("2_n8dix")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -21.9421, -11.0501, -8.80886)
